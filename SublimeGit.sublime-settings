{
    /*
     * Log level.
     *
     * If you are experiencing issues, please set this to DEBUG and
     * provide the log when reporting an issue.
     */
    "log_level": "WARNING",

    /*
     * Main encoding used for interacting with Git.
     */
    "encoding": "utf-8",

    /*
     * Fallback encodings if the main encoding does not work.
     *
     * Git is a "stupid" content tracker, and as such it doesn't
     * care about encodings, only streams of bytes. If you have commit
     * messages or files which are not UTF-8 encoded, it might be necessary
     * to add one or more special encodings to this setting.
     *
     * Be aware that they will be tried in order from front to back, so
     * there is a small performance penalty if you add an encoding to the
     * back of the list.
     */
    "fallback_encodings": ["cp1252", "iso-8859-1", "iso-8859-2", "cp1250"],

    /*
     * Show Inline Status Help
     *
     * If set to true, the bottom of the Git: Status view
     * will contain a cheatsheet showing shortcuts and
     * possible actions.
     */
    "git_show_status_help": true,

    /*
     * Update Status View on Focus
     *
     * If set to true, the status view will be updated whenever
     * it comes back in focus. If you have a slow computer, or
     * your git status command runs slow for any other reason, you
     * might want to set this to false.
     */
    "git_update_status_on_focus": true,

    /*
     * Show Untracked Files in Status View
     *
     * If for some reason you have a lot of untracked files that
     * you don't want to show up in the status view, you can use
     * this setting. Also affects Git: Quick Add and Git: Quick Status
     *
     * Possible values:
     *   "all": show all untracked files
     *   "auto": obey the status.showUntrackedFiles git config setting
     *   "none": never show untracked files
     */
    "git_status_untracked_files": "auto",

    /*
     * Open Files Transient
     *
     * When a file is opened from the status view, by default
     * it is marked as transient. It will not get it's own tab
     * until you start editing it. If you want to always open
     * the file in its own tab, set this setting to false.
     *
     */
    "git_status_open_files_transient": true,

    /*
     * Disable vintageous mode
     *
     * Vintageous is disabled by default, since otherwise
     * you'd have to enter insert mode to use any of the
     * SublimeGit keyboard shortcuts. If you know what
     * you're doing, and you want a different behavior
     * you can enable vintageous in the status view by
     * setting this to false.
     */
     "git_status_disable_vintageous": true,

    /*
     * Change behavior of the status bar message
     *
     * If set to "fancy", SublimeGit will show a message like
     * "on <branch><dirty> in <repo>". If set to "simple"
     * the status message will be "on <branch>".
     *
     * Set to false to completely disable the status bar (might
     * be necessary for performance reasons on huge projects).
     */
    "git_status_bar": "fancy",

    /*
     * Verbose commit messages
     *
     * If set to true, the diff output for the current commit
     * will be shown below the commit overview when writing a
     * commit message.
     */
    "git_commit_verbose": false,

    /*
     * Pedantic commit messages
     *
     * The style guide for commit messages dictate that:
     *  - The first line should be max 50 chars
     *  - The second line should be empty
     *  - Subsequent lines should be max 72 chars
     *
     * If this setting is true, SublimeGit will mark these
     * errors with an icon in the gutter, and different color
     * text for the offending lines.
     */
    "git_commit_pedantic": false,

    /*
     * Extra merge flags to use when running Git: Merge
     *
     * By default, git merge is run like this:
     *
     *  git merge --no-progress <branch>
     *
     * If you want to add something like "--no-ff", set this
     * value to ["--no-ff"]. Then the command run will be
     *
     *  git merge --no-progress --no-ff <branch>
     *
     * It is possible to add several options, using the default
     * list syntax like so:
     *
     *  "git_merge_flags": ["--no-ff", "--strategy=ours"]
     *
     */
     "git_merge_flags": [],

    /*
     * Warning when opening multiple tabs from a blame view.
     *
     * If set to true, you will receive a warning when your
     * action will open more than 5 tabs. To completely
     * disable this, set it to false.
     */
    "git_blame_warn_multiple_tabs": true,

    /*
     * Executables
     *
     * The simplest way to make sure that everything works
     * is to make sure that all of these are in your
     * sublime path.
     *
     * You can see your current sublime path by opening the
     * console and entering "import os; os.getenv('PATH')".
     * Be aware that your sublime path might be different
     * depending on how you started sublime. If you are
     * unsure where your executables are, try running
     * "which {executable}" in your terminal.
     *
     * If you can't put these executables in your path you
     * can change them to absolute paths here. Be aware
     * that each item in the list will be quoted on its
     * own. Examples:
     *
     * ['/usr/local/bin/git']
     * ['/usr/bin/git', 'flow']
     * ['git', 'flow']
     */
    "git_executables": {
        "git": ["git"],        
        "legit": ["legit"],
        "gitk": ["gitk"]
    },

    /*
     * Forced path
     *
     * If you are having issues with the path (especially on OS X),
     * you can use this setting to force a path instead of having
     * Sublime Text take it from the environment.
     *
     * It can be specified either as a string or as an array. If
     * specified as an array, it will be concat'ed with the appropriate
     * path separator for the platform. Examples:
     *
     * ['/usr/local/bin', '/usr/bin', '/bin']
     * "/usr/local/bin:/usr/bin:/bin"
     *
     */
     "git_force_path": null,

    /*
     * Fancy Help
     *
     * If set to true, the Git: Help command will try to
     * parse the individual help files to give nicer output
     * in the quickbar.
     *
     * There is a performance impact on the first run in each
     * session. Afterwards, the list is cached, and will be
     * shown instantly.
     *
     * If you are on a slow computer, turning this off might
     * speed up the first run of the Git: Help command
     * significantly.
     */
    "git_help_fancy_list": true,

    /*
     * Git Html path
     *
     * Usually, git will give the path to the included html
     * help files when called like this:
     *
     * git --html-path
     *
     * If this doesn't work, you can set the path explicitly
     * here. Set to null to default to asking git.
     */

    "git_help_html_path": null,

    /*
     * Extensions
     *
     * SublimeGit ships with extensions for:
     *
     *  - git-flow (https://github.com/nvie/gitflow)
     *  - legit (http://www.git-legit.org/)
     *  - hub (https://github.com/defunkt/hub)
     *
     * To enable or disable these extensions set these
     * settings to true/false. If an extension is disabled,
     * its commands will not show up in your command
     * palette.
     *
     * Requires a restart of Sublime Text to take effect.
     */
    "git_extensions": {
        "git_flow": true,
        "legit": true
    }
}
